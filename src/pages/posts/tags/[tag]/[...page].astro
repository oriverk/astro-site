---
import type { GetStaticPaths } from "astro";
import { getPosts, getTags } from "../../../../utils/getPosts";
import Layout from "../../../../layouts/Layout.astro"
import ContentWrapper from "../../../../components/ui/ContentWrapper.svelte";
import PostPagination from "../../../../components/PostPagination.svelte"
import PostCard from "../../../../components/PostCard.svelte"

export const getStaticPaths = (async ({ paginate }) => {
  const posts = await getPosts();
  const tags = await getTags()
  return tags.flatMap(tag => {
    const postsWithTag = posts.filter((post) => post.data.tags.includes(tag))
    return paginate(postsWithTag, { params: {tag}, pageSize: 12});
  })
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const { data, ...rest } = page; 
const { tag} = Astro.params;
---

<Layout title={`#${tag} posts`}>
  <ContentWrapper>
    <h1><span>#{tag}</span> Posts</h1>
    <div class="pagination">
      <PostPagination {...rest} />
    </div>
    <div class="posts">
      {data.map(post => {
        const {slug, data} = post
        const { update, ...rest } = data;
        const href = `/posts/${slug}`
        return (
          <PostCard {href} update={update || ""} {...rest} />
        )
      })}
    </div>
    <div class="pagination">
      <PostPagination {...rest} />
    </div>
  </ContentWrapper>
</Layout>

<style>
  h1 span {
    color: rgb(var(--color-miku));
  }

  .posts {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fill,minmax(256px,1fr));
  }

  .pagination {
    display: flex;
    justify-content: space-evenly;
  }
</style>


